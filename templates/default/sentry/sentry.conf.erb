# This sentry config generated by <%= node['fqdn'] %>

# <%= @config %>

<% if node['sentry']['include_settings'] %>
<%= node['sentry']['include_settings'] %> import *
<% end %>

DATABASES = {
  <% for name, dsettings in @databases %>
  "<%= name %>": {
       <% for key, value in dsettings %>
       "<%= key.upcase %>": <% if value.is_a?(Integer) %><%= value %><% else %>"<%= value %>"<% end %>,
       <% end %>
  },
  <% end %>
}

# No trailing slash!
SENTRY_URL_PREFIX = "<%= @prefix %>"

# Set this to false to require authentication
SENTRY_PUBLIC = <%= @public %>

# SENTRY_KEY is a unique randomly generated secret key for your server, and it
# acts as a signing token

SENTRY_KEY = "<%= @private_key %>"

# SENTRY_WEB_HOST = "<%= @web['host'] %>"
# SENTRY_WEB_PORT = "<%= @web['port'] %>"
# SENTRY_WEB_OPTIONS = {
#   <% for @name, @value in @web['options'] %>
#   '<%= @name %>': '<%= @value %>',
#   <% end %>
#}


# Mail server configuration

# For more information check Django's documentation:
#  https://docs.djangoproject.com/en/1.3/topics/email/?from=olddocs#e-mail-backends

EMAIL_BACKEND = "<%= @email['backend'] %>"

SERVER_EMAIL = "<%= @email['from'] || @email['user'] %>"
EMAIL_HOST = "<%= @email['host'] %>"
EMAIL_HOST_PASSWORD = "<%= @email['password'] %>"
EMAIL_HOST_USER = "<%= @email['user'] %>"
EMAIL_PORT = <%= @email['port'] %>
EMAIL_USE_TLS = <%= @email['use_tls'] || "False" %>


<% for network, params in @social %>
   <% for param, value in params %>
<%= network.upcase %>_<%= param.upcase %> = <% if value.is_a?(Integer) %><%= value %><% else %>"<%= value %>"<% end %>
   <% end %>
<% end %>

SOCIAL_AUTH_CREATE_USERS = <%= @social_auth_create_users %>

# Custom settings
<% for key, value in @custom_settings %>
<%= key.upcase %> = <% if value.is_a?(Integer) %><%= value %><% else %>"<%= value %>"<% end %>
<% end %>

EXTRA_INSTALLED_APPS = [
<% for item in @plugins %>
   '<%= item %>',
<% end %>
<% for item in @third_party_plugins %>
   <% if item['name'] %>
   '<%= item['name'] %>',
   <% end %>
<% end %>
]


EXTRA_ALLOWED_HOSTS = ['*']


SENTRY_REDIS_OPTIONS = {
  "hosts": {
  <% for host, hostsettings in @redis['hosts'] %>
  <%= host %>: {
       <% for key, value in hostsettings %>
       "<%= key %>": <% if value.is_a?(Integer) %><%= value %><% else %>"<%= value %>"<% end %>,
       <% end %>
  },
  <% end %>
  }
}

<% if @tsdb %>
SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'

SENTRY_TSDB_OPTIONS = {
	'hosts': SENTRY_REDIS_OPTIONS['hosts']
}

<% end %>


<% if @use_queue and @redis['hosts'] %>
REDIS_DB = SENTRY_REDIS_OPTIONS['hosts'].keys()[0]
REDIS_DB_CONF = SENTRY_REDIS_OPTIONS['hosts'][REDIS_DB]
BROKER_URL = "redis://{0}:{1}/{2}".format(REDIS_DB_CONF['HOST'], REDIS_DB_CONF['PORT'], REDIS_DB)
CELERY_ALWAYS_EAGER = False
CELERYBEAT_SCHEDULER = "djcelery.schedulers.DatabaseScheduler"

<% end %>

<% if @use_buffers and @redis['hosts'] %>
SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'

SENTRY_BUFFER_OPTIONS = {
    'hosts': SENTRY_REDIS_OPTIONS['hosts']
}
<% end %>
